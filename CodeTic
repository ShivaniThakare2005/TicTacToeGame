#include <iostream>
using namespace std;

void DBoard(char board[3][3]) {
    cout << "\nTic Tac Toe Board\n";
    cout << "-------------\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << " " << board[i][j] << " ";
            if (j < 2) cout << "|";
        }
        cout << "\n";
        if (i < 2) cout << "---|---|---\n";
    }
    cout << "-------------\n";
}
bool CWin(char board[3][3], char player) {
   
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player)
            return true;
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player)
            return true; 
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
        return true; 
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
        return true; 
    return false;
}
bool isBoardFull(char board[3][3]) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                return false; 
            }
        }
    }
    return true; 
}
void PMove(char board[3][3], char player) {
    int row, col;
    while (true) {
        cout << "Player " << player << ", enter your move (row and column between 1 and 3): ";
        cin >> row >> col;
        row--; col--;
        if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') {
            board[row][col] = player;
            break;
        } else {
            cout << "Invalid move. The cell is either occupied or out of bounds. Try again.\n";
        }
    }
}

int main() {
    char board[3][3] = { {' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '} };
    char currentPlayer = 'X';
    
    while (true) {
        DBoard(board);
        PMove(board, currentPlayer);

        if (CWin(board, currentPlayer)) {
        DBoard(board);
            cout << "Player " << currentPlayer << " wins!\n";
            break;
        }
        if (isBoardFull(board)) {
            DBoard(board);
            cout << "It's a tie!\n";
            break;
        }
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    return 0;
}
